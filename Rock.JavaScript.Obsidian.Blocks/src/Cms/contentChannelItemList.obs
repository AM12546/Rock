<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid v-if="config"
          :definition="config?.gridDefinition ?? undefined"
          :data="gridDataSource"
          keyField="id"
          :itemTerm="config?.options?.contentItemName + ' Items'"
          :entityTypeGuid="EntityType.ContentChannelItem"
          stickyHeader
          liveUpdates
          :onAddItem="config?.isAddEnabled ? onAddItem : undefined"
          :customActions="customActions"
          @selectItem="onSelectItem">

        <ReorderColumn v-if="config?.options?.showReorderColumn" @orderChanged="onOrderChanged" />

        <TextColumn name="title"
                    title="Title"
                    field="title"
                    :filter="config?.options?.showFilters ? textValueFilter : undefined" />

        <DateTimeColumn v-if="config?.options?.showStartDateTimeColumn && config?.options?.includeTime"
                        name="startDateTime"
                        :title="config?.options?.dateType == ContentChannelDateType.DateRange ? 'Start' : 'Active'"
                        field="startDateTime"
                        :filter="config?.options?.showFilters ? dateValueFilter : undefined" />

        <DateColumn v-if="config?.options?.showStartDateTimeColumn && !config?.options?.includeTime"
                    name="startDateTime"
                    :title="config?.options?.dateType == ContentChannelDateType.DateRange ? 'Start' : 'Active'"
                    field="startDateTime"
                    :filter="config?.options?.showFilters ? dateValueFilter : undefined" />

        <DateTimeColumn v-if="config?.options?.showExpireDateTimeColumn && config?.options?.includeTime"
                        name="expireDateTime"
                        title="Expire"
                        field="expireDateTime"
                        :filter="config?.options?.showFilters ? dateValueFilter : undefined" />

        <DateColumn v-if="config?.options?.showExpireDateTimeColumn && !config?.options?.includeTime"
                    name="expireDateTime"
                    title="Expire"
                    field="expireDateTime"
                    :filter="config?.options?.showFilters ? dateValueFilter : undefined" />

        <NumberColumn v-if="config?.options?.showPriorityColumn"
                      name="priority"
                      title="Priority"
                      field="priority"
                      :filter="config?.options?.showFilters ? numberValueFilter : undefined"
                      width="125" />

        <Column v-if="config.options?.isContentLibraryEnabled"
                name="library"
                title="Library">
            <template #format="{ row }">
                <RockButton v-if="row.isUploadedToContentLibrary">Is Uploaded</RockButton>
                <RockButton v-else-if="row.isDownloadedFromContentLibrary">Is Downloaded</RockButton>
                <RockButton v-else-if="!row.contentLibrarySourceIdentifier">Upload</RockButton>

            </template>

            <template #skeleton>
                <div class="skeleton skeleton-text skeleton-rounded" />
            </template>
        </Column>

        <AttributeColumns :attributes="config?.gridDefinition?.attributeFields ?? []" :filter="null" />

        <LabelColumn v-if="config?.options?.showStatusColumn"
                     name="status"
                     title="Status"
                     field="status"
                     :filter="config?.options?.showFilters ? pickExistingValueFilter : undefined"
                     :textSource="ContentChannelItemStatusDescription"
                     :classSource="statusLabelColors"
                     width="150" />

        <SecurityColumn v-if="config?.options?.showSecurityColumn" />

        <DeleteColumn v-if="config?.isDeleteEnabled" @click="onDeleteClick" />
    </Grid>
</template>

<script setup lang="ts">
    import { computed, reactive, ref } from "vue";
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";
    import Grid, { AttributeColumns, NumberColumn, numberValueFilter, TextColumn, textValueFilter, DateTimeColumn, DateColumn, dateValueFilter, DeleteColumn, SecurityColumn, LabelColumn, pickExistingValueFilter, ReorderColumn, Column } from "@Obsidian/Controls/grid";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import { type GridAction } from "@Obsidian/Types/Controls/grid";
    import { alert } from "@Obsidian/Utility/dialogs";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { ContentChannelItemListOptionsBag } from "@Obsidian/ViewModels/Blocks/Cms/ContentChannelItemList/contentChannelItemListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { NavigationUrlKey } from "./ContentChannelItemList/types.partial";
    import { ContentChannelDateType } from "@Obsidian/Enums/Cms/contentChannelDateType";
    import { ContentChannelItemStatus, ContentChannelItemStatusDescription } from "@Obsidian/Enums/Cms/contentChannelItemStatus";

    const config = useConfigurationValues<ListBlockBox<ContentChannelItemListOptionsBag>>();

    console.log(config);
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;

    const customActions = computed<GridAction[]>(() => {
        if (config.options?.isContentLibraryEnabled) {
            return [
                {
                    title: "Download from Library",
                    tooltip: "Download from Library",
                    isPrimary: true,
                    iconCssClass: "fa fa-download",
                    handler: () => {
                        window.location = (config.navigationUrls?.[NavigationUrlKey.LibraryDownloadPage] ?? "/") as (string & Location);
                    }
                }
            ];
        }
        return [];
    });

    const statusLabelColors: Record<string, string> = {
        [ContentChannelItemStatusDescription[ContentChannelItemStatus.PendingApproval]]: "default",
        [ContentChannelItemStatusDescription[ContentChannelItemStatus.Approved]]: "success",
        [ContentChannelItemStatusDescription[ContentChannelItemStatus.Denied]]: "danger"
    };

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    /**
     * Called when a row's delete button has been clicked by the individual. This
     * happens only if they have confirmed the delete action.
     */
    async function onDeleteClick(key: string): Promise<void> {
        const result = await invokeBlockAction<string>("Delete", {
            key
        });

        if (result.isSuccess) {
            if (gridData && gridData.rows) {
                const index = gridData.rows.findIndex(r => r["idKey"] === key);

                if (index !== -1) {
                    gridData.rows?.splice(index, 1);
                }
            }
        }
        else {
            await alert(result.errorMessage ?? "Unknown error while trying to delete content channel item.");
        }
    }

    /**
     * Called when the Add button has been clicked by the indivual.
     */
    function onAddItem(): void {
        if (config.navigationUrls?.[NavigationUrlKey.NewItemPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.NewItemPage].replace("((Key))", "0");
        }
    }

    /**
     * Called when a row has been dragged from one position to a new position.
     *
     * @param item The item that was moved to a new position.
     * @param beforeItem The item that the first item was dropped before.
     *
     * @returns `true` if the operation succeeded; otherwise `false`.
     */
    async function onOrderChanged(item: Record<string, unknown>, beforeItem: Record<string, unknown> | null): Promise<boolean> {
        // TODO
        const result = await invokeBlockAction<string>("ReorderItem", {
            key: item["idKey"],
            beforeKey: beforeItem?.["idKey"] ?? null
        });

        return result.isSuccess;
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
