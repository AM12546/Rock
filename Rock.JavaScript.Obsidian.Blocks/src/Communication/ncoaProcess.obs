<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <NotificationBox v-if="successMessage"
        alertType="success"
        v-html="successMessage" />
    <NotificationBox v-if="errorMessage"
        v-text="errorMessage"
        alertType="warning" />
    <Panel title="National Change of Address (NCOA) Processing">
        <p><strong>Enhance Your Data</strong></p>
        <p>TrueNCOA provides a service to non-profits to validate and update person address data leveraging the National Change of Address (NCOA)
            database maintained by the U.S. Postal Service. The output will include details such as the personâ€™s current address, move date, and
            move type (temporary or permanent).
        </p>
        <p class="mb-5">Be sure to <a href="https://app.truencoa.com/Users/Register">sign-up with TrueNCOA</a> before you get started. This block will export the needed input file for TrueNCOA and allow you to
            import their results back into Rock.
        </p>

        <div class="row">
            <div class="col-md-6">
                <div class="well col-md-offset-1 col-md-11 col-lg-10 flex-between" style="height: 620px;">
                    <div>
                        <h3>Step 1: NCOA Export Tool</h3>
                        <div class="ml-2">
                            <p style="opacity: 0.6;">Select a data vew to filter your export.</p>
                            <div class="input-width">
                                <DataViewPicker
                                    v-model="selectedPersonDataView"
                                    label="Person Data View"
                                    help="Person data view filter to apply."
                                    />
                            </div>
                        </div>
                    </div>
                    <div class="ml-2">
                        <RockButton
                            :btnSize="BtnSize.Default"
                            :btnType="BtnType.Primary"
                            :disabled="isLoading"
                            @click="exportFile"
                            >
                            Export File
                        </RockButton>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="well col-md-11 col-lg-offset-1 col-lg-10 flex-between" style="height: 620px;">
                    <div>
                        <h3>STEP 2: NCOA Results Uploader</h3>
                        <div class="ml-2">
                            <p style="opacity: 0.6;">Upload and configure file processing settings.</p>
                            <FileUploader
                                v-model="importedFile"
                                label="TrueNCOA Results"
                                help=""
                                :uploadAsTemporary="true"
                                uploadButtonText="Upload"
                                :showDeleteButton="true" />
                            <div class="input-width">
                                <NumberBox v-model="minMoveDistance" label="Minimum Move Distance to Inactivate"
                                help="Minimum move distance that a person moved before marking the person's account to inactivate. Leaving the value blank disables this feature."
                                    rules="required"
                                    >
                                    <template #inputGroupAppend>
                                        <span class="input-group-addon">Miles</span>
                                    </template>
                                </NumberBox>
                            </div>
                            <CheckBox v-model="isMark48Month"
                                label="Mark 48 Month Move as Previous Address"
                                help="Mark moves in the 19-48 month catagory as a previous address." />
                            <CheckBox v-model="isMarkInvalidAddresses"
                                label="Mark Invalid Addresses as Previous Address"
                                help="Mark Invalid Addresses as Previous Addresses" />
                                <div class="input-width">
                                    <DefinedValuePicker
                                        v-model="selectedInactiveReason"
                                        label="Inactive Record Reason"
                                        :definedTypeGuid="DefinedType.PersonRecordStatusReason"
                                        help="The reason to use when inactivating people due to moving beyond the configured number of miles." />
                                </div>
                        </div>
                    </div>
                    <div class="ml-2">
                        <RockButton
                        :btnSize="BtnSize.Default"
                        :btnType="BtnType.Primary"
                        @click="processImportFile"
                        >
                            Import File
                        </RockButton>
                    </div>
                </div>
            </div>
        </div>
    </Panel>
</template>

<script setup lang="ts">
import NotificationBox from "@Obsidian/Controls/notificationBox.obs";
import Panel from "@Obsidian/Controls/panel.obs";
import RockButton from "@Obsidian/Controls/rockButton.obs";
import DataViewPicker from "@Obsidian/Controls/dataViewPicker.obs";
import FileUploader from "@Obsidian/Controls/fileUploader.obs";
import NumberBox from "@Obsidian/Controls/numberBox.obs";
import CheckBox from "@Obsidian/Controls/checkBox.obs";
import DefinedValuePicker from "@Obsidian/Controls/definedValuePicker.obs";
import { DefinedType } from "@Obsidian/SystemGuids/definedType";
import { BtnType } from "@Obsidian/Enums/Controls/btnType";
import { BtnSize } from "@Obsidian/Enums/Controls/btnSize";
import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
import { ref } from "vue";
import { NcoaProcessSavedSettingsBag } from "@Obsidian/ViewModels/Blocks/Communication/NcoaProcess/ncoaProcessSavedSettingsBag";
import { NcoaProcessBag } from "@Obsidian/ViewModels/Blocks/Communication/NcoaProcess/ncoaProcessBag";
import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
import { Workbook } from "@Obsidian/Libs/exceljs";

    const box = useConfigurationValues<NcoaProcessSavedSettingsBag>();
    const invokeBlockAction = useInvokeBlockAction();

    const minMoveDistance = ref(box.minimumMoveDistance ?? 200);
    const isMark48Month = ref(box.is48MonthMoveChecked ?? true);
    const isMarkInvalidAddresses = ref(box.isInvalidAddressesChecked ?? true);
    const selectedPersonDataView = ref(box.personDataView ?? {value: null});

    const selectedInactiveReason = ref<ListItemBag | null>(box.inactiveRecordReason ?? null);

    const importedFile = ref(box.uploadFileReference ?? null);

    const successMessage = ref("");
    const errorMessage = ref("");
    const isLoading = ref(false);

    console.log("here is box: ", box);

    const exportFile = async () => {
        isLoading.value = true;
        const result = await invokeBlockAction<NcoaProcessBag>("PrepareExportFile", { dataViewValue: selectedPersonDataView.value.value});
        // Generate Excel file and download
        if (result.isSuccess) {
            const workbook = generateDataForFile(result.data?.addresses);
            await downloadWorkbook(workbook, "ExportedAddresses", "csv").then(() => {
                successMessage.value = result.data?.successMessage || "Success";
            });
        }
        else {
            errorMessage.value = result.errorMessage || "Error";
        }
        isLoading.value = false;
    };

    const processImportFile = async () => {

        const bag = <NcoaProcessBag> {
            inactiveReason: selectedInactiveReason.value,
            mark48MonthAsPrevious: isMark48Month.value,
            markInvalidAsPrevious: isMarkInvalidAddresses.value,
            minMoveDistance: minMoveDistance.value,
            ncoaFileUploadReference: importedFile.value
        };
        const result = await invokeBlockAction<NcoaProcessBag>("ProcessNcoaImportFile", { bag });

        if (result.isSuccess) {
            successMessage.value = result.data?.successMessage || "Success";
        }
        else {
            errorMessage.value = result.errorMessage || "Error";
        }

        // console.log(result);
    };

    // Function to generate data for the excel/csv file
    function generateDataForFile(data) :Workbook {
        const workbook = new Workbook();
        const worksheet = workbook.addWorksheet();

        // Extracting keys from the data dictionary
        const keys = Object.keys(data);

        // Extracting header row
        const headerRow = Object.keys(data[keys[0]]) as string[];

        // Creating array to hold data rows
        const dataArray = [headerRow];

        // Pushing data rows
        keys.forEach(key => {
            const rowData = Object.values(data[key]).map(value => String(value));
            dataArray.push(rowData);
        });

        // Add data to worksheet
        dataArray.forEach(row => {
            worksheet.addRow(row);
        });

        return workbook;
    }

    /**
     * Triggers an automatic download of the workbook so it can be saved to
     * the filesystem.
     *
     * @param workbook The workbook to be downloaded by the browser.
     * @param title The title of the workbook, this is used as the base for the filename.
     * @param format The format to use when downloading the workbook.
     */
     async function downloadWorkbook(workbook: Workbook, title: string, format: "csv" | "xlsx"): Promise<void> {
        // Get the export data.
        const buffer = format === "xlsx"
            ? await workbook.xlsx.writeBuffer()
            : await workbook.csv.writeBuffer();

        // Create the URL that contains the file data.
        const url = URL.createObjectURL(new Blob([buffer], {
            type: "application/octet-stream"
        }));

        // Create a fake hyperlink to simulate an attempt to download a file.
        const element = document.createElement("a");
        element.innerText = "Download";
        element.style.position = "absolute";
        element.style.top = "-100px";
        element.style.left = "0";
        element.href = url;
        element.download = `${title.replace(/[^a-zA-Z0-9\-_]/g, "")}.${format}`;
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);

        setTimeout(() => URL.revokeObjectURL(url), 100);
    }

</script>

<style scoped>
.flex-between {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

.input-width {
    width: 70%;
    min-width: 280px;
}

</style>