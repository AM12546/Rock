<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Grid :definition="config.gridDefinition ?? undefined"
          :data="gridDataSource"
          :entityTypeGuid="entityTypeGuid"
          keyField="id"
          personKeyField="id"
          itemTerm="Business"
          stickyHeader
          liveUpdates
          @selectItem="onSelectItem"
          :personAsBusiness="true"
          :showBulkUpdate="true"
          :showCommunicate="true"
          :showPersonMerge="true">

        <SelectColumn />

        <TextColumn name="businessName"
                    title="Business Name"
                    field="businessName"
                    :filter="textValueFilter"
                    visiblePriority="xs"
                    width="15%" />

        <Column name="contactInformation"
                title="Contact Information"
                :filter="textValueFilter"
                visiblePriority="xs">
            <template #format="{ row }">
                <div>
                    <div>
                        <span>{{ row.phoneNumber }}</span>
                    </div>
                    <div v-if="row.email">
                        {{ row.email }}
                    </div>
                </div>
            </template>

            <template #skeleton>
                <div class="skeleton skeleton-text skeleton-rounded" />
            </template>
        </Column>

        <Column name="address"
                title="Address"
                :filter="textValueFilter"
                visiblePriority="xs">
            <template #format="{ row }">
                <div>
                    <div>
                        <span>{{ row.street }}</span>
                    </div>
                    <div>
                        <span>{{ row.city }},&nbsp;</span>
                        <span>{{ row.state }}&nbsp;</span>
                        <span>{{ row.zip }}</span>
                    </div>
                </div>
            </template>

            <template #skeleton>
                <div class="skeleton skeleton-text skeleton-rounded" />
            </template>
        </Column>

        <TextColumn name="contacts"
                    title="Contacts"
                    field="contacts"
                    :filter="textValueFilter"
                    visiblePriority="xs"
                    width="5%" />


        <TextColumn name="campus"
                    title="Campus"
                    field="campus"
                    :filter="textValueFilter"
                    visiblePriority="xs"
                    width="5%" />
    </Grid>
</template>

<script setup lang="ts">
    import { useConfigurationValues, useInvokeBlockAction } from "@Obsidian/Utility/block";
    import Grid, { Column, SelectColumn, TextColumn, textValueFilter } from "@Obsidian/Controls/grid";
    import { ListBlockBox } from "@Obsidian/ViewModels/Blocks/listBlockBox";
    import { BusinessListOptionsBag } from "@Obsidian/ViewModels/Blocks/Finance/BusinessList/businessListOptionsBag";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { reactive, ref } from "vue";
    import { NavigationUrlKey } from "./BusinessList/types.partial";
    import { EntityType } from "@Obsidian/SystemGuids/entityType";

    const config = useConfigurationValues<ListBlockBox<BusinessListOptionsBag>>();
    const invokeBlockAction = useInvokeBlockAction();

    // #region Values

    const gridDataSource = ref<Promise<GridDataBag>>();
    let gridData: GridDataBag | undefined;
    const entityTypeGuid = EntityType.Person;

    // #endregion

    // #region Functions

    /**
     * Called when the grid is requesting the row data be loaded.
     */
    async function loadGridData(): Promise<GridDataBag> {
        const result = await invokeBlockAction<GridDataBag>("GetGridData");

        if (result.isSuccess && result.data) {
            gridData = reactive(result.data);
            return gridData;
        }
        else {
            throw new Error(result.errorMessage ?? "Unknown error while trying to load grid data.");
        }
    }

    // #endregion

    // #region Event Handlers

    /**
     * Called when a row has been selected by the individual.
     *
     * @param key The key of the row that was selected.
     */
    function onSelectItem(key: string): void {
        if (config.navigationUrls?.[NavigationUrlKey.DetailPage]) {
            window.location.href = config.navigationUrls[NavigationUrlKey.DetailPage].replace("((Key))", key);
        }
    }

    // #endregion

    gridDataSource.value = loadGridData();
</script>
