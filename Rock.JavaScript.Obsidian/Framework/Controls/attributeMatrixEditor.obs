<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <RockFormField :modelValue="internalValue" v-bind="fieldProps" name="x-field">
        <Grid :data="gridData" keyField="key" liveUpdates light @addItem="onAddItem" @selectItem="console.log">
            <ReorderColumn />
            <!-- <TextColumn name="name"
                        title="nameTitle"
                        field="name" />

            <DateColumn name="date"
                        title="dateTitle"
                        field="date"
                        visiblePriority="md" />

            <NumberColumn name="index"
                          title="numberTitle"
                          field="index"
                          visiblePriority="lg" />

            <BooleanColumn name="isActive"
                           title="activeTitle"
                           field="isActive"
                           visiblePriority="sm" /> -->

            <AttributeColumns :attributes="attributeList" />

            <DeleteColumn @click="onDelete" disableConfirmation />
        </Grid>
    </RockFormField>
</template>

<script setup lang="ts">
    import { PropType, reactive } from "vue";
    import RockFormField from "@Obsidian/Controls/rockFormField.obs";
    import Grid, { AttributeColumns, BooleanColumn, DateColumn, DeleteColumn, EditColumn, NumberColumn, TextColumn, ReorderColumn } from "@Obsidian/Controls/grid";
    import { GridDataBag } from "@Obsidian/ViewModels/Core/Grid/gridDataBag";
    import { RockDateTime } from "@Obsidian/Utility/rockDateTime";
    import { standardRockFormFieldProps, useStandardRockFormFieldProps, useVModelPassthrough } from "@Obsidian/Utility/component";
    import { newGuid } from "@Obsidian/Utility/guid";

    const props = defineProps({
        modelValue: {
            type: String as PropType<string>,
            required: true
        },

        ...standardRockFormFieldProps
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: string): void
    }>();

    const internalValue = useVModelPassthrough(props, "modelValue", emit);

    const fieldProps = useStandardRockFormFieldProps(props);





    const attributes = {
        "ArticleImage": {
            "fieldTypeGuid": "97f8157d-a8c8-4ab3-96a2-9cb2a9049e6d",
            "attributeGuid": "ba1d667d-080d-4a17-9392-f3e953969c7a",
            "name": "Article Image",
            "key": "ArticleImage",
            "description": "",
            "isRequired": false,
            "order": 0,
            "categories": null,
            "configurationValues": {
                "binaryFileType": "c1142570-8cd6-4a20-83b1-acb47c1cd377",
                "formatAsLink": "False",
                "img_tag_template": "<img src='{{ ImageUrl }}' class='img-responsive' />"
            },
            "preHtml": null,
            "postHtml": null
        },
        "ArticleTitle": {
            "fieldTypeGuid": "9c204cd0-1233-41c5-818a-c5da439445aa",
            "attributeGuid": "dbc9e868-d509-4436-8b11-1343a02db433",
            "name": "Article Title",
            "key": "ArticleTitle",
            "description": "",
            "isRequired": true,
            "order": 1,
            "categories": null,
            "configurationValues": {
                "ispassword": "False",
                "maxcharacters": "",
                "showcountdown": "False"
            },
            "preHtml": null,
            "postHtml": null
        },
        "ArticleContent": {
            "fieldTypeGuid": "dd7ed4c0-a9e0-434f-acfe-bd4f56b043df",
            "attributeGuid": "95fe772f-d799-41dd-9802-f5fd487933fc",
            "name": "Article Content",
            "key": "ArticleContent",
            "description": "",
            "isRequired": true,
            "order": 2,
            "categories": null,
            "configurationValues": {
                "documentfolderroot": "",
                "imagefolderroot": "",
                "toolbar": "Light",
                "userspecificroot": "False"
            },
            "preHtml": null,
            "postHtml": null
        },
        "ArticleLink": {
            "fieldTypeGuid": "c0d0d7e2-c3b0-4004-abea-4bbfad10d5d2",
            "attributeGuid": "f1213105-c2ce-4ca3-9039-cd1c4b40d048",
            "name": "ArticleLink",
            "key": "ArticleLink",
            "description": "Optional link to for the article.",
            "isRequired": false,
            "order": 3,
            "categories": null,
            "configurationValues": {},
            "preHtml": null,
            "postHtml": null
        }
    };
    const matrixItems = [
        {
            "guid": "ac0dd30f-6ec3-4254-9362-cfee0141c69e",
            "order": 0,
            "attributeValues": {
                "ArticleImage": "",
                "ArticleTitle": "Another",
                "ArticleContent": "<p>Thing</p>",
                "ArticleLink": "/foryou"
            }
        },
        {
            "guid": "6b2ed1cf-5e51-4b13-a59f-f19d55db8479",
            "order": 1,
            "attributeValues": {
                "ArticleImage": "",
                "ArticleTitle": "Hello",
                "ArticleContent": "<p>There</p>",
                "ArticleLink": ""
            }
        },
        {
            "guid": "296c0144-e58e-4eb9-8f42-5b5587b26f09",
            "order": 2,
            "attributeValues": {
                "ArticleImage": "",
                "ArticleTitle": "Some Title",
                "ArticleContent": "<p>Some Content</p>",
                "ArticleLink": "/some-url"
            }
        }
    ];






    const gridData: GridDataBag = reactive<GridDataBag>({
        rows: matrixItems.map(item => ({
            key: item.guid,
            ...item.attributeValues
        }))
    });

    const attributeList = Object.values(attributes).map(attr => ({ fieldTypeGuid: attr.fieldTypeGuid, name: attr.key, title: attr.name }));


    function generateItem(index: number): Record<string, unknown> {
        return {
            key: newGuid(),
            name: `Item ${index}`,
            date: RockDateTime.now().date.addDays(-index).toISOString(),
            index: index,
            isActive: (index % 3) === 0
        };
    }

    function onAddItem(): void {
        console.log("TODO! SHOW POPUP");
        if (gridData.rows) {
            gridData.rows.push(generateItem(gridData.rows.length + 1));
        }
    }

    function onDelete(key: string): void {
        if (gridData.rows) {
            const index = gridData.rows.findIndex(r => r.key === key);

            if (index !== -1) {
                gridData.rows.splice(index, 1);
            }
        }
    }


</script>
