<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div :class="{ 'row': !showInOneColumn }">
        <div :class="{ 'col-sm-4': !showInOneColumn }">
            <DefinedValuePicker v-model="title" :definedTypeGuid="DefinedType.PersonTitle" :label="fullPrefix + 'Title'" class="input-width-md" formGroupClasses="field-title" showBlankItem />
            <TextBox v-model="firstName" :label="fullPrefix + 'First Name'" rules="required" formGroupClasses="field-firstname" />
            <TextBox v-model="lastName" :label="fullPrefix + 'Last Name'" rules="required" formGroupClasses="field-firstname" />
            <DefinedValuePicker v-model="suffix" :definedTypeGuid="DefinedType.PersonSuffix" :label="fullPrefix + 'Suffix'" class="input-width-md" formGroupClasses="field-suffix" showBlankItem />
            <EmailBox v-if="showEmail" v-model="email" :label="fullPrefix + 'Email'" formGroupClasses="field-email" />
            <PhoneNumberBox v-if="showMobilePhone" v-model="mobilePhone" :label="fullPrefix + 'Mobile Phone'" formGroupClasses="field-mobilephone" />
            <CheckBox v-if="showSmsOptIn" v-model="smsOptIn" validationLabel="Opt Into SMS" label="" text="Give your consent to receive SMS messages by simply checking the box." />
        </div>
        <div :class="{ 'col-sm-4': !showInOneColumn }">
            <DefinedValuePicker v-model="connectionStatus" :definedTypeGuid="DefinedType.PersonConnectionStatus" :label="fullPrefix + 'Connection Status'" formGroupClasses="field-connectionstatus" showBlankItem rules="required" />
            <RadioButtonList v-model="role" :label="fullPrefix + 'Role'" rules="required" :items="roles" horizontal formGroupClasses="field-role" />
            <RadioButtonList v-model="gender" :label="fullPrefix + 'Gender'" :items="genders" horizontal formGroupClasses="field-gender" />
        </div>
        <div :class="{ 'col-sm-4': !showInOneColumn }">
            <BirthdayPicker v-model="birthday" :label="fullPrefix + 'Birthdate'" formGroupClasses="field-birthdate" />
            <GradePicker v-model="grade" :label="fullPrefix + 'Grade'" useAbbreviation showBlankItem />
            <DefinedValuePicker v-model="maritalStatus" :definedTypeGuid="DefinedType.PersonMaritalStatus" :label="fullPrefix + 'Marital Status'" formGroupClasses="field-maritalstatus" showBlankItem />
            <RacePicker v-model="race" formGroupClasses="field-race" :labelPrefix="personLabelPrefix" showBlankItem />
            <EthnicityPicker v-model="ethnicity" formGroupClasses="field-ethnicity" :labelPrefix="personLabelPrefix" showBlankItem />
        </div>
    </div>
</template>

<script setup lang="ts">
    import { computed, PropType, ref } from "vue";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { DefinedType } from "@Obsidian/SystemGuids/definedType";
    import DefinedValuePicker from "@Obsidian/Controls/definedValuePicker.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import EmailBox from "@Obsidian/Controls/emailBox.obs";
    import PhoneNumberBox from "@Obsidian/Controls/phoneNumberBox.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import RadioButtonList from "@Obsidian/Controls/radioButtonList.obs";
    import BirthdayPicker from "@Obsidian/Controls/birthdayPicker.obs";
    import GradePicker from "@Obsidian/Controls/gradePicker.obs";
    import RacePicker from "@Obsidian/Controls/racePicker.obs";
    import EthnicityPicker from "@Obsidian/Controls/ethnicityPicker.obs";
    import { useHttp } from "@Obsidian/Utility/http";

    const props = defineProps({
        modelValue: {
            type: Object as PropType<ListItemBag>,
            required: true
        },

        showInOneColumn: {
            type: Boolean,
            default: false
        },

        personLabelPrefix: {
            type: String,
            default: ""
        },

        showEmail: Boolean,
        showMobilePhone: Boolean,
        showSmsOptIn: Boolean,
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: ListItemBag): void
    }>();

    const title = ref(null);
    const firstName = ref("");
    const lastName = ref("");
    const suffix = ref(null);
    const email = ref("");
    const mobilePhone = ref("");
    const smsOptIn = ref(false);

    const connectionStatus = ref(null);
    const role = ref("");
    const gender = ref("");

    const birthday = ref(null);
    const grade = ref(null);

    const roles = ref([]);
    const genders = [{ text: "Male", value: "1" }, { text: "Female", value: "2" }];
    const maritalStatus = ref(null);
    const race = ref(null);
    const ethnicity = ref(null);

    const http = useHttp();


    const fullPrefix = computed(() => {
        if (props.personLabelPrefix) {
            return props.personLabelPrefix + " ";
        }

        return "";
    });


    async function loadOptions(): Promise<void> {
        const options = {};
        const url = "/api/v2/Controls/PersonBasicEditorGetOptions";
        const response = await http.post<any>(url, undefined, options);

        if (response.isSuccess && response.data) {
            roles.value = response.data.roles;
        }
        else {
            console.error("Error fetching items from server", response.errorMessage);
        }
    }

    loadOptions();
</script>