<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div :class="{ 'row': !showInOneColumn }">
        <div :class="{ 'col-sm-4': !showInOneColumn }">
            <DefinedValuePicker v-if="!hideTitle" v-model="personTitle" :definedTypeGuid="DefinedType.PersonTitle" :label="fullPrefix + 'Title'" class="input-width-md" formGroupClasses="field-title" showBlankItem />
            <TextBox v-model="firstName" :label="fullPrefix + 'First Name'" rules="required" formGroupClasses="field-firstname" />
            <TextBox v-model="lastName" :label="fullPrefix + 'Last Name'" rules="required" formGroupClasses="field-firstname" />
            <DefinedValuePicker v-if="!hideSuffix" v-model="personSuffix" :definedTypeGuid="DefinedType.PersonSuffix" :label="fullPrefix + 'Suffix'" class="input-width-md" formGroupClasses="field-suffix" showBlankItem />
            <EmailBox v-if="showEmail" v-model="email" :label="fullPrefix + 'Email'" formGroupClasses="field-email" :rules="requireEmail ? 'required' : ''" />
            <PhoneNumberBox v-if="showMobilePhone" v-model="mobilePhoneNumber" v-model:countryCode="mobilePhoneCountryCode" :label="fullPrefix + 'Mobile Phone'" formGroupClasses="field-mobilephone" :rules="requireMobilePhone ? 'required' : ''" />
            <CheckBox v-if="showSmsOptIn" v-model="isMessagingEnabled" validationLabel="Opt Into SMS" label="" text="Give your consent to receive SMS messages by simply checking the box." />
        </div>
        <div :class="{ 'col-sm-4': !showInOneColumn }">
            <DefinedValuePicker v-if="!hideConnectionStatus" v-model="personConnectionStatus" :definedTypeGuid="DefinedType.PersonConnectionStatus" :label="fullPrefix + 'Connection Status'" formGroupClasses="field-connectionstatus" showBlankItem rules="required" />
            <GroupRolePicker v-if="!hidePersonRole" v-model="personGroupRole" :label="fullPrefix + 'Role'" rules="required" displayStyle="list" horizontal formGroupClasses="field-role" :groupTypeGuid="GroupType.GrouptypeFamily" />
            <RadioButtonList v-if="!hideGender" v-model="personGender" :label="fullPrefix + 'Gender'" :items="genders" horizontal formGroupClasses="field-gender" :rules="requireGender ? 'required' : ''" />
        </div>
        <div :class="{ 'col-sm-4': !showInOneColumn }">
            <BirthdayPicker v-if="!hideBirthdate" v-model="personBirthDate" :label="fullPrefix + 'Birthdate'" formGroupClasses="field-birthdate" :rules="requireBirthdate ? 'required' : ''" />
            <GradePicker v-if="!hideGrade" v-model="personGradeOffset" :label="fullPrefix + 'Grade'" useAbbreviation showBlankItem />
            <DefinedValuePicker v-if="!hideMaritalStatus" v-model="personMaritalStatus" :definedTypeGuid="DefinedType.PersonMaritalStatus" :label="fullPrefix + 'Marital Status'" formGroupClasses="field-maritalstatus" showBlankItem />
            <RacePicker v-if="!hideRace" v-model="personRace" formGroupClasses="field-race" :labelPrefix="personLabelPrefix" showBlankItem :rules="requireRace ? 'required' : ''" />
            <EthnicityPicker v-if="!hideEthnicity" v-model="personEthnicity" formGroupClasses="field-ethnicity" :labelPrefix="personLabelPrefix" showBlankItem :rules="requireEthnicity ? 'required' : ''" />
        </div>
    </div>
</template>

<script setup lang="ts">
    import { computed, PropType, ref, watch, watchEffect } from "vue";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import { DefinedType } from "@Obsidian/SystemGuids/definedType";
    import { GroupType } from "@Obsidian/SystemGuids/groupType";
    import DefinedValuePicker from "@Obsidian/Controls/definedValuePicker.obs";
    import TextBox from "@Obsidian/Controls/textBox.obs";
    import EmailBox from "@Obsidian/Controls/emailBox.obs";
    import PhoneNumberBox from "@Obsidian/Controls/phoneNumberBox.obs";
    import GroupRolePicker from "@Obsidian/Controls/groupRolePicker.obs";
    import CheckBox from "@Obsidian/Controls/checkBox.obs";
    import RadioButtonList from "@Obsidian/Controls/radioButtonList.obs";
    import BirthdayPicker from "@Obsidian/Controls/birthdayPicker.obs";
    import GradePicker from "@Obsidian/Controls/gradePicker.obs";
    import RacePicker from "@Obsidian/Controls/racePicker.obs";
    import EthnicityPicker from "@Obsidian/Controls/ethnicityPicker.obs";
    import { useHttp } from "@Obsidian/Utility/http";
    import { Guid } from "@Obsidian/Types";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";


    const props = defineProps({
        // Person Properties
        /** V-Model */
        firstName: {
            type: String,
            default: null
        },
        /** V-Model */
        lastName: {
            type: String,
            default: null
        },
        /** V-Model */
        personTitle: {
            type: Object as PropType<ListItemBag>,
            default: null
        },
        /** V-Model */
        personSuffix: {
            type: Object as PropType<ListItemBag>,
            default: null
        },
        /** V-Model */
        personMaritalStatus: {
            type: Object as PropType<ListItemBag>,
            default: null
        },
        /** V-Model */
        personGradeOffset: {
            type: Object as PropType<ListItemBag>,
            default: null
        },
        /** V-Model */
        personGroupRole: {
            type: Object as PropType<ListItemBag>,
            default: null
        },
        /** V-Model */
        personConnectionStatus: {
            type: Object as PropType<ListItemBag>,
            default: null
        },
        /** V-Model */
        personGender: {
            type: String,
            default: null
        },
        /** V-Model */
        personRace: {
            type: Object as PropType<ListItemBag>,
            default: null
        },
        /** V-Model */
        personEthnicity: {
            type: Object as PropType<ListItemBag>,
            default: null
        },
        /** V-Model */
        personBirthDate: {
            type: Object as PropType<ListItemBag>,
            default: null
        },
        /** V-Model */
        email: {
            type: String,
            default: null
        },
        /** V-Model */
        mobilePhoneNumber: {
            type: String,
            default: null
        },
        /** V-Model */
        mobilePhoneCountryCode: {
            type: String,
            default: null
        },
        /** V-Model */
        isMessagingEnabled: {
            type: Boolean,
            default: null
        },

        /** If a personGuid is given, this will fetch that person's details from the server and pre-fill the fields */
        personGuid: {
            type: String as PropType<Guid>,
            default: null
        },

        /** By default is shown in a 3-column layout. If this is true, it becomes 1 column. */
        showInOneColumn: {
            type: Boolean,
            default: false
        },

        /** Prefix each label with */
        personLabelPrefix: {
            type: String,
            default: ""
        },

        // Field Visibility
        showEmail: {
            type: Boolean,
            default: false
        },
        showMobilePhone: {
            type: Boolean,
            default: false
        },
        showSmsOptIn: {
            type: Boolean,
            default: false
        },
        hideTitle: {
            type: Boolean,
            default: false
        },
        hideSuffix: {
            type: Boolean,
            default: false
        },
        hideGrade: {
            type: Boolean,
            default: false
        },
        hideBirthdate: {
            type: Boolean,
            default: false
        },
        hidePersonRole: {
            type: Boolean,
            default: false
        },
        hideConnectionStatus: {
            type: Boolean,
            default: false
        },
        hideMaritalStatus: {
            type: Boolean,
            default: false
        },
        hideGender: {
            type: Boolean,
            default: false
        },
        hideRace: {
            type: Boolean,
            default: false
        },
        hideEthnicity: {
            type: Boolean,
            default: false
        },

        // Field Requirements
        requireBirthdate: {
            type: Boolean,
            default: false
        },
        requireEmail: {
            type: Boolean,
            default: false
        },
        requireMobilePhone: {
            type: Boolean,
            default: false
        },
        requireGender: {
            type: Boolean,
            default: false
        },
        requireRace: {
            type: Boolean,
            default: false
        },
        requireEthnicity: {
            type: Boolean,
            default: false
        },
    });

    const emit = defineEmits<{
        (e: "update:firstName", value: string): void
        (e: "update:lastName", value: string): void
        (e: "update:personTitle", value: ListItemBag): void
        (e: "update:personSuffix", value: ListItemBag): void
        (e: "update:personMaritalStatus", value: ListItemBag): void
        (e: "update:personGradeOffset", value: ListItemBag): void
        (e: "update:personGroupRole", value: ListItemBag): void
        (e: "update:personConnectionStatus", value: ListItemBag): void
        (e: "update:personGender", value: string): void
        (e: "update:personRace", value: ListItemBag): void
        (e: "update:personEthnicity", value: ListItemBag): void
        (e: "update:personBirthDate", value: ListItemBag): void
        (e: "update:email", value: string): void
        (e: "update:mobilePhoneNumber", value: string): void
        (e: "update:mobilePhoneCountryCode", value: string): void
        (e: "update:isMessagingEnabled", value: boolean): void
    }>();

    // V-Models
    const firstName = useVModelPassthrough(props, "firstName", emit);
    const lastName = useVModelPassthrough(props, "lastName", emit);
    const personTitle = useVModelPassthrough(props, "personTitle", emit);
    const personSuffix = useVModelPassthrough(props, "personSuffix", emit);
    const personMaritalStatus = useVModelPassthrough(props, "personMaritalStatus", emit);
    const personGradeOffset = useVModelPassthrough(props, "personGradeOffset", emit);
    const personGroupRole = useVModelPassthrough(props, "personGroupRole", emit);
    const personConnectionStatus = useVModelPassthrough(props, "personConnectionStatus", emit);
    const personGender = useVModelPassthrough(props, "personGender", emit);
    const personRace = useVModelPassthrough(props, "personRace", emit);
    const personEthnicity = useVModelPassthrough(props, "personEthnicity", emit);
    const personBirthDate = useVModelPassthrough(props, "personBirthDate", emit);
    const email = useVModelPassthrough(props, "email", emit);
    const mobilePhoneNumber = useVModelPassthrough(props, "mobilePhoneNumber", emit);
    const mobilePhoneCountryCode = useVModelPassthrough(props, "mobilePhoneCountryCode", emit);
    const isMessagingEnabled = useVModelPassthrough(props, "isMessagingEnabled", emit);


    const genders = [{ text: "Male", value: "1" }, { text: "Female", value: "2" }];
    const http = useHttp();


    const fullPrefix = computed(() => {
        if (props.personLabelPrefix) {
            return props.personLabelPrefix + " ";
        }

        return "";
    });

    watchEffect(() => {
        if (props.personGuid) {
            loadPersonData();
        }
    });

    async function loadPersonData(): Promise<void> {
        const options = {};
        const url = "/api/v2/Controls/PersonBasicEditorGetPersonData";

        const response = await http.post<any>(url, undefined, options);

        if (response.isSuccess && response.data) {
            // roles.value = response.data.roles;
        }
        else {
            console.error("Error fetching items from server", response.errorMessage);
        }
    }
</script>